# -*- coding: utf-8 -*-
"""
Created on Fri Oct  8 17:11:47 2021

@author: Nikhil
"""


import kfp
from kfp import dsl
from kfp.components import func_to_container_op

@func_to_container_op
def show_results(logistic_regression : float) -> None:
    # Given the outputs from decision_tree and logistic regression components
    # the results are shown.

    #print(f"Linear regression (r2_score): {linear_regression}")
    print(f"Logistic regression (accuracy): {logistic_regression}")


@dsl.pipeline(name='First Pipeline', description='Applies Decision Tree and Logistic Regression for classification problem.')
def first_pipeline():

    # Loads the yaml manifest for each component
    extract_data = kfp.components.load_component_from_file('extract_data/extract_data.yaml')
    process_data = kfp.components.load_component_from_file('process_data/process_data.yaml')
    logistic_regression = kfp.components.load_component_from_file('logistic_regression/logistic_regression.yaml')
    #linear_regression = kfp.components.load_component_from_file('linear_regression/linear_regression.yaml')
    #decision_tree = kfp.components.load_component_from_file('decision_tree/decision_tree.yaml')
    #logistic_regression = kfp.components.load_component_from_file('logistic_regression/logistic_regression.yaml')

    # Run download_data task
    extract_task = extract_data()

    # Run tasks "decison_tree" and "logistic_regression" given
    # the output generated by "download_task".
    process_data_task = process_data(extract_task.output)
    logistic_regression_task = logistic_regression(process_data_task.output)
    #linear_regression_task = linear_regression(process_data_task.output)

    # Given the outputs from "decision_tree" and "logistic_regression"
    # the component "show_results" is called to print the results.
    show_results(logistic_regression_task.output)



if __name__ == '__main__':
    kfp.compiler.Compiler().compile(first_pipeline, 'FirstPipeline.yaml')
    # kfp.Client().create_run_from_pipeline_func(basic_pipeline, arguments={})